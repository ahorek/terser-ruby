diff --git a/lib/minify.js b/lib/minify.js
index 725e3d96..4cef6bb1 100644
--- a/lib/minify.js
+++ b/lib/minify.js
@@ -280,13 +280,10 @@ async function minify(files, options, _fs_module) {
     if (options.format.spidermonkey) {
         result.ast = toplevel.to_mozilla_ast();
     }
-    let format_options;
     if (!HOP(options.format, "code") || options.format.code) {
-        // Make a shallow copy so that we can modify without mutating the user's input.
-        format_options = {...options.format};
-        if (!format_options.ast) {
+        if (!options.format.ast) {
             // Destroy stuff to save RAM. (unless the deprecated `ast` option is on)
-            format_options._destroy_ast = true;
+            options.format._destroy_ast = true;
 
             walk(toplevel, node => {
                 if (node instanceof AST_Scope) {
@@ -303,38 +300,34 @@ async function minify(files, options, _fs_module) {
         }
 
         if (options.sourceMap) {
-            if (options.sourceMap.includeSources && files instanceof AST_Toplevel) {
-                throw new Error("original source content unavailable");
+            if (typeof options.sourceMap.content == "string") {
+                options.sourceMap.content = JSON.parse(options.sourceMap.content);
             }
-            format_options.source_map = await SourceMap({
+            options.format.source_map = SourceMap({
                 file: options.sourceMap.filename,
                 orig: options.sourceMap.content,
-                root: options.sourceMap.root,
-                files: options.sourceMap.includeSources ? files : null,
+                root: options.sourceMap.root
             });
+            if (options.sourceMap.includeSources) {
+                if (files instanceof AST_Toplevel) {
+                    throw new Error("original source content unavailable");
+                } else for (var name in files) if (HOP(files, name)) {
+                    options.format.source_map.get().setSourceContent(name, files[name]);
+                }
+            }
         }
-        delete format_options.ast;
-        delete format_options.code;
-        delete format_options.spidermonkey;
-        var stream = OutputStream(format_options);
+        delete options.format.ast;
+        delete options.format.code;
+        delete options.format.spidermonkey;
+        var stream = OutputStream(options.format);
         toplevel.print(stream);
         result.code = stream.get();
         if (options.sourceMap) {
-            Object.defineProperty(result, "map", {
-                configurable: true,
-                enumerable: true,
-                get() {
-                    const map = format_options.source_map.getEncoded();
-                    return (result.map = options.sourceMap.asObject ? map : JSON.stringify(map));
-                },
-                set(value) {
-                    Object.defineProperty(result, "map", {
-                        value,
-                        writable: true,
-                    });
-                }
-            });
-            result.decoded_map = format_options.source_map.getDecoded();
+            if(options.sourceMap.asObject) {
+                result.map = options.format.source_map.get().toJSON();
+            } else {
+                result.map = options.format.source_map.toString();
+            }
             if (options.sourceMap.url == "inline") {
                 var sourceMap = typeof result.map === "object" ? JSON.stringify(result.map) : result.map;
                 result.code += "\n//# sourceMappingURL=data:application/json;charset=utf-8;base64," + to_base64(sourceMap);
@@ -349,9 +342,6 @@ async function minify(files, options, _fs_module) {
             options.nameCache.props = cache_to_json(options.mangle.properties.cache);
         }
     }
-    if (format_options && format_options.source_map) {
-        format_options.source_map.destroy();
-    }
     if (timings) {
         timings.end = Date.now();
         result.timings = {
diff --git a/lib/sourcemap.js b/lib/sourcemap.js
index f376ccc8..4fd32e84 100644
--- a/lib/sourcemap.js
+++ b/lib/sourcemap.js
@@ -47,38 +47,26 @@ import {SourceMapConsumer, SourceMapGenerator} from "@jridgewell/source-map";
 import {defaults, HOP} from "./utils/index.js";
 
 // a small wrapper around source-map and @jridgewell/source-map
-async function SourceMap(options) {
+function SourceMap(options) {
     options = defaults(options, {
         file : null,
         root : null,
         orig : null,
         files: {},
     });
-
-    var orig_map;
     var generator = new SourceMapGenerator({
         file       : options.file,
         sourceRoot : options.root
     });
+    var orig_map = options.orig && new MOZ_SourceMap.SourceMapConsumer(options.orig);
 
-    let sourcesContent = {__proto__: null};
-    let files = options.files;
-    for (var name in files) if (HOP(files, name)) {
-        sourcesContent[name] = files[name];
-    }
-    if (options.orig) {
-        // We support both @jridgewell/source-map (which has a sync
-        // SourceMapConsumer) and source-map (which has an async
-        // SourceMapConsumer).
-        orig_map = await new SourceMapConsumer(options.orig);
-        if (orig_map.sourcesContent) {
-            orig_map.sources.forEach(function(source, i) {
-                var content = orig_map.sourcesContent[i];
-                if (content) {
-                    sourcesContent[source] = content;
-                }
-            });
-        }
+    if (orig_map) {
+        orig_map.sources.forEach(function(source) {
+            var sourceContent = orig_map.sourceContentFor(source, true);
+            if (sourceContent) {
+                generator.setSourceContent(source, sourceContent);
+            }
+        });
     }
 
     function add(source, gen_line, gen_col, orig_line, orig_col, name) {
@@ -111,7 +99,6 @@ async function SourceMap(options) {
         });
         generator.setSourceContent(source, sourcesContent[source]);
     }
-
     function clean(map) {
         const allNull = map.sourcesContent && map.sourcesContent.every(c => c == null);
         if (allNull) delete map.sourcesContent;
@@ -136,10 +123,9 @@ async function SourceMap(options) {
     }
 
     return {
-        add,
-        getDecoded,
-        getEncoded,
-        destroy,
+        add        : add,
+        get        : function() { return generator; },
+        toString   : function() { return JSON.stringify(generator.toJSON()); }
     };
 }
 
diff --git a/main.js b/main.js
index 0a10db5a..8eb0dc81 100644
--- a/main.js
+++ b/main.js
@@ -1,8 +1,8 @@
 import "./lib/transform.js";
 import "./lib/mozilla-ast.js";
-import { minify } from "./lib/minify.js";
+import { minify, minifySync } from "./lib/minify.js";
 
-export { minify } from "./lib/minify.js";
+export { minify, minifySync } from "./lib/minify.js";
 export { run_cli as _run_cli } from "./lib/cli.js";
 
 export async function _default_options() {
diff --git a/package.json b/package.json
index 9c37e699..ada2196e 100644
--- a/package.json
+++ b/package.json
@@ -47,7 +47,8 @@
     "@jridgewell/source-map": "^0.3.2",
     "acorn": "^8.5.0",
     "commander": "^2.20.0",
-    "source-map-support": "~0.5.20"
+    "source-map": "~0.6.1",
+    "source-map-support": "~0.5.12"
   },
   "devDependencies": {
     "@ls-lint/ls-lint": "^1.10.0",
@@ -59,8 +60,7 @@
     "pre-commit": "^1.2.2",
     "rimraf": "^3.0.2",
     "rollup": "2.56.3",
-    "semver": "^7.3.4",
-    "source-map": "~0.8.0-beta.0"
+    "semver": "^7.3.4"
   },
   "scripts": {
     "test": "node test/compress.js && mocha test/mocha",

warning: LF will be replaced by CRLF in package.json.
The file will have its original line endings in your working directory
